name: devsecops-pipeline
on:
  push:
    branches:
      - devsecops-jan-2025

jobs:
  ci-job:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout or Code Clone
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Secret Scanning - Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v4.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=santhosh-devops-demo
            -Dsonar.projectKey=santhosh-devops-demo_sysfoo
            -Dsonar.sources=.
            -Dsonar.verbose=true
            -Dsonar.language=java
            -Dsonar.java.binaries=./target/classes

      - name: SCA Step
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
            
  build-sysfoo:
    needs:
      - ci-job
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Code Checkout or Code Clone
        uses: actions/checkout@v4

      - name: Dockerfile Liniting - Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
  
      - name: Docker login
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build Step
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/sysfoo:v1 .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: docker.io/${{ secrets.DOCKER_USERNAME }}/sysfoo:v1
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: aqua-trivy    
          
      - name: Docker Push Step
        run: docker push ${{ secrets.DOCKER_USERNAME }}/sysfoo:v1
        
  deploy-k8s:
    needs:
      - build-sysfoo
    runs-on: ubuntu-latest

    steps:
      - name: Code Checkout or Code Clone
        uses: actions/checkout@v4
        
      - name: Start minikube
        uses: medyagh/setup-minikube@latest

      - name: Try the cluster!
        run: kubectl get pods -A

      - name: Deploy to Minikube
        run: |
          kubectl apply -f manifests/deployment.yaml
          kubectl apply -f manifests/service.yaml
          kubectl wait --for-condition=ready pod -l app=sysfoo

      - name: Test Service URLs
        run: |
          minikube service list
          minikube service sysfoo-service --url
          echo "------------------opening the service------------------"
          curl $(minikube service sysfoo-service --url)
      
